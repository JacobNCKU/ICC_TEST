module SME(clk, reset, chardata, isstring, ispattern, valid, match, match_index);
input clk;
input reset;
input [7:0] chardata;
input isstring;
input ispattern;
output reg match;
output reg [7:0] match_index;
output reg valid;

reg [3:0] cs, ns;
reg [5:0] st_cnt;
reg [3:0] pa_cnt;
integer i;

// State parameters
parameter IDLE = 0;
parameter GET = 1;
parameter SEEK = 2;
parameter MATCH = 3;
parameter GOOD = 4;
parameter FAIL = 5;

reg [7:0] st_cnt_match;
reg [3:0] pa_cnt_match;
reg [7:0] pa_reg[7:0];
reg [7:0] st_reg[31:0];
reg [7:0] match_index_reg;
wire clear;

// Check if clear condition is met
assign clear = ((cs == GOOD || cs == FAIL) && isstring == 1 && pa_cnt == 0 && pa_cnt_match == 0) ? 1 : 0;
assign twopoint = (pa_reg[0] == 8'h2E && pa_reg[1] == 8'h2E && pa_reg[2] != 8'h2E);
assign sp_twopoint = (pa_reg[0] == 8'h5E && pa_reg[1] == 8'h2E && pa_reg[2] == 8'h2E && pa_reg[3] != 8'h2E); // ^...
assign sp_case = (pa_reg[0] == 8'h5E && pa_reg[1] == 8'h2E && pa_reg[2] == 8'h2E && pa_reg[3] == 8'h2E && pa_reg[4] == 8'h2E && pa_reg[5] == 8'h24);

// State transition process
always @(posedge clk or posedge reset) begin
	if (reset) 
		cs <= IDLE;
    else if (ns == SEEK && pa_cnt_match == 1)
        cs <= MATCH;
	else 
		cs <= ns;
end

// Next state logic
always @(*) begin
    case (cs)
        IDLE: begin
            if (reset)
                ns = IDLE;
            else if (isstring || ispattern)
                ns = GET;
            else
                ns = ns;
        end
        GET: begin
            if (!(isstring || ispattern))
                ns = SEEK;
            else
                ns = ns;
        end
        SEEK: begin
            if (st_cnt == st_cnt_match)
                ns = FAIL; // unmatched
            else begin
                if (pa_cnt == 1 && (pa_reg[pa_cnt_match] == 8'h2E || pa_reg[pa_cnt_match] == st_reg[st_cnt_match]))
                    ns = MATCH;
                else if (twopoint == 1 && (pa_reg[pa_cnt_match + 2] != st_reg[st_cnt_match + 2] && pa_reg[pa_cnt_match + 2] != 8'h2E))
                    ns = SEEK;
                else if (pa_reg[pa_cnt_match + 1] == 8'h2E && pa_reg[pa_cnt_match] == 8'h2E)
                    ns = MATCH;
                else if ((pa_reg[pa_cnt_match + 1] != st_reg[st_cnt_match + 1]) && pa_reg[pa_cnt_match] == 8'h2E)
                    ns = SEEK;
                else if (pa_reg[pa_cnt_match] == 8'h2E) // .
                    ns = MATCH;
                else if (pa_reg[pa_cnt_match] == 8'h5E && st_cnt_match == 6'd0 && pa_reg[pa_cnt_match + 1] == st_reg[st_cnt_match]) // ^
                    ns = MATCH;
                else if (pa_reg[pa_cnt_match] == 8'h5E && st_reg[st_cnt_match] == 8'h20 && pa_reg[pa_cnt_match + 1] == st_reg[st_cnt_match + 1]) // ^
                    ns = MATCH;
                else if (pa_reg[pa_cnt_match] == st_reg[st_cnt_match] && pa_reg[pa_cnt_match + 1] == 8'h2E)
                    ns = MATCH;
                else if (pa_reg[pa_cnt_match] == st_reg[st_cnt_match] && pa_reg[pa_cnt_match + 1] == st_reg[st_cnt_match + 1])
                    ns = MATCH;
                else if (sp_twopoint == 1 && (st_reg[st_cnt_match] == 8'h20) && (pa_reg[pa_cnt_match + 3] == st_reg[st_cnt_match + 3]))
                    ns = MATCH;
                else if (sp_case == 1 && ((st_cnt_match + 4) == st_cnt || st_reg[st_cnt_match + 5] == 8'h20) && st_reg[st_cnt_match] == 8'h20)
                    ns = MATCH;
                else
                    ns = SEEK;
            end
        end
        MATCH: begin
            if (pa_reg[pa_cnt_match] == 8'h2E && st_cnt_match == st_cnt && pa_cnt_match != pa_cnt)
                ns = FAIL;
            else if (pa_reg[pa_cnt_match] == 8'h2E) // .
                ns = MATCH;
            else if ((pa_reg[pa_cnt_match] == st_cnt[st_cnt_match] || pa_reg[pa_cnt_match] == 8'h2E) && pa_cnt[pa_cnt_match + 
