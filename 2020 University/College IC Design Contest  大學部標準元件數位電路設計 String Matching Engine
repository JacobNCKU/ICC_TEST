module SME(clk,reset,chardata,isstring,ispattern,valid,match,match_index);
input clk;
input reset;
input [7:0] chardata;
input isstring;
input ispattern;
output reg match;
output reg [7:0] match_index;
output reg valid;

reg [3:0]cs,ns;
reg [5:0]st_cnt;
reg [3:0]pa_cnt;
integer i;

parameter IDLE = 0;
parameter GET = 1;
parameter SEEK = 2;
parameter MATCH = 3;
parameter GOOD = 4 ;
parameter FAIL = 5 ;

reg [7:0]st_cnt_match;
reg [3:0]pa_cnt_match;
reg [7:0]pa_reg[7:0];
reg [7:0]st_reg[31:0];
reg [7:0]match_index_reg;
wire  clear;

assign clear = ((cs==GOOD||cs==FAIL)&&isstring==1&&pa_cnt==0&&pa_cnt_match==0) ? 1 : 0;
assign twopoint= (pa_reg[0]==8'h2E&&pa_reg[1]==8'h2E&&pa_reg[2]!=8'h2E);
assign sp_twopoint=(pa_reg[0]==8'h5E&&pa_reg[1]==8'h2E&&pa_reg[2]==8'h2E&&pa_reg[3]!=8'h2E);//^...
assign sp_case=(pa_reg[0]==8'h5E&&pa_reg[1]==8'h2E&&pa_reg[2]==8'h2E&&pa_reg[3]==8'h2E&&pa_reg[4]==8'h2E&&pa_reg[5]==8'h24);

always@(posedge clk or posedge reset)begin
	if(reset) 
		cs <= IDLE;
    else if(ns==SEEK&pa_cnt_match==1)
        begin
           cs <= MATCH;
        end
	else 
		cs <= ns;
end

always@(*) begin
	case(cs)
	IDLE: begin
		if(reset) 
			ns = IDLE;
		else if(isstring||ispattern)
            ns = GET;
        else
            ns = ns;
    end
	GET:begin
		if(!(isstring||ispattern))
            ns = SEEK;
        else
            ns = ns;
    end
	SEEK:
		begin
			if(st_cnt == st_cnt_match)
				 ns = FAIL; //unmach
			else begin 
                if(pa_cnt==1&&(pa_reg[pa_cnt_match]==8'h2E||pa_reg[pa_cnt_match]==st_reg[st_cnt_match]))
                    ns=MATCH;
                else if(twopoint==1&&(pa_reg[pa_cnt_match+2]!=st_reg[st_cnt_match+2]&&pa_reg[pa_cnt_match+2]!=8'h2E))
                    ns=SEEK;
                else if(pa_reg[pa_cnt_match+1]==8'h2E&&pa_reg[pa_cnt_match]==8'h2E)
                    ns=MATCH;
                else if((pa_reg[pa_cnt_match+1]!=st_reg[st_cnt_match+1])&&pa_reg[pa_cnt_match]==8'h2E)
                    ns=SEEK;
                else if(pa_reg[pa_cnt_match] == 8'h2E)  // .
					ns=MATCH;
                else if(pa_reg[pa_cnt_match] == 8'h5E && st_cnt_match == 6'd0&&pa_reg[pa_cnt_match+1]==st_reg[st_cnt_match])  // ^
                    ns=MATCH;
				else if(pa_reg[pa_cnt_match] == 8'h5E && st_reg[st_cnt_match] == 8'h20&&pa_reg[pa_cnt_match+1]==st_reg[st_cnt_match+1])  // ^
					ns=MATCH;
                else if(pa_reg[pa_cnt_match] == st_reg[st_cnt_match]&&pa_reg[pa_cnt_match+1]==8'h2E)
                    ns=MATCH;
                else if(pa_reg[pa_cnt_match] == st_reg[st_cnt_match]&&pa_reg[pa_cnt_match+1]==st_reg[st_cnt_match+1])
                    ns=MATCH;
                else if(sp_twopoint==1&&(st_reg[st_cnt_match]==8'h20)&&(pa_reg[pa_cnt_match+3]==st_reg[st_cnt_match+3]))
                    ns=MATCH;
                else if(sp_case==1&&((st_cnt_match+4)==st_cnt||st_reg[st_cnt_match+5]==8'h20)&&st_reg[st_cnt_match]==8'h20)
                    ns=MATCH;
                else 
                    ns=SEEK;
			end
		end
	MATCH: begin
        if(pa_reg[pa_cnt_match]==8'h2E&&st_cnt_match==st_cnt&&pa_cnt_match!=pa_cnt)
                ns = FAIL;
        else if(pa_reg[pa_cnt_match] == 8'h2E)  // .
				ns = MATCH;
        else if((pa_reg[pa_cnt_match]==st_cnt[st_cnt_match]||pa_reg[pa_cnt_match]==8'h2E)&&pa_cnt[pa_cnt_match+1]==8'h24&&st_cnt_match==st_cnt)
                ns = GOOD;
		else if(pa_reg[pa_cnt_match] == 8'h24 && st_cnt_match == st_cnt)  // $
				ns = GOOD; //mach
        else if(pa_reg[pa_cnt_match+1]==8'h20 && st_cnt_match==st_cnt)
                ns =FAIL;
		else if(pa_reg[pa_cnt_match] == 8'h24 && st_reg[st_cnt_match] == 8'h20)  // $
				ns = GOOD; //mach
        else if(pa_cnt == pa_cnt_match)
                ns = GOOD;
        else if(pa_reg[pa_cnt_match] == st_reg[st_cnt_match] && st_cnt_match == st_cnt)  // $
				ns = GOOD; //mach
        else if(st_cnt_match == st_cnt)
                ns = FAIL;
        else if((pa_reg[pa_cnt_match] != st_reg[st_cnt_match]&&pa_reg[pa_cnt_match]!=8'h2E) && st_cnt_match != st_cnt)
                ns = SEEK;
        else    
            ns = MATCH;
    end 
    GOOD:begin
        if(isstring||ispattern)
            ns = GET;
        else
            ns = ns;
    end
    FAIL:begin
        if(isstring||ispattern)
            ns = GET;
        else
            ns = ns;
    end
    default: ns=IDLE;
	endcase
end

always @(posedge clk or posedge reset) begin
	if(reset)begin
		for (i=0;i<=7;i=i+1) begin
			pa_reg[i]<=0;	
		end
			pa_cnt<=0;
	end
	else if((cs==GET||ns==GET)&&ispattern)begin
			pa_reg[pa_cnt] <= chardata;
			pa_cnt <= pa_cnt + 1;
	end	
    else if(cs==GOOD||cs==FAIL)
        pa_cnt<=0;
end

always @(posedge clk or posedge reset) begin
	if(reset)begin
		for (i=0;i<=33;i=i+1) begin
			st_reg[i]<=0;	
		end
			st_cnt<=0;
    end
    else if(clear)begin
			st_reg[0] <= chardata;
			st_cnt <= 1;
	end
	else if((cs==GET||ns==GET)&&isstring)begin
			st_reg[st_cnt] <= chardata;
			st_cnt <= st_cnt + 1;
	end                     
	else begin	
        for (i=0;i<=33;i=i+1) begin
			st_reg[i]<=st_reg[i];	
		end
			st_cnt<=st_cnt;
    end
end

//pa_cnt_match//ex:^abcd:pattern  abcde:string
always @(posedge clk or posedge reset) begin
    if(reset)
        pa_cnt_match<=0;
    else if(cs==SEEK&&pa_reg[pa_cnt_match] == 8'h5E && st_cnt_match==0 &&pa_reg[pa_cnt_match+1]==st_reg[st_cnt_match])
        pa_cnt_match<=pa_cnt_match+1;
    else if(cs==SEEK&&(pa_reg[pa_cnt_match] == 8'h5E && st_reg[st_cnt_match] == 8'h20&&pa_reg[pa_cnt_match+1]==st_reg[st_cnt_match+1]) )
        pa_cnt_match<=pa_cnt_match+2;
    else if(cs==2&&(pa_reg[pa_cnt_match+1]!=st_reg[st_cnt_match+1]&&pa_reg[pa_cnt_match+1]!=8'h2E)&&pa_reg[pa_cnt_match]==8'h2E)
        pa_cnt_match<= pa_cnt_match;
    else if(cs==2&&ns==3)
        pa_cnt_match<=pa_cnt_match+1;
    else if(cs==3&&ns==2)
        pa_cnt_match<=0;    
    else if(cs==MATCH)
        pa_cnt_match<=pa_cnt_match+1;
    else    
        pa_cnt_match<=0; 
end

always @(posedge clk or posedge reset) begin
    if(reset)
        st_cnt_match<=0;
    else if(cs==SEEK&&(pa_reg[pa_cnt_match] == 8'h5E && st_reg[st_cnt_match] == 8'h20&&pa_reg[pa_cnt_match+1]==st_reg[st_cnt_match+1]))
        st_cnt_match<=st_cnt_match+2;
    else if(cs==SEEK&&(st_reg[st_cnt_match] == 8'h20&&pa_reg[pa_cnt_match+1]==st_reg[st_cnt_match+1]))
        st_cnt_match<=st_cnt_match+2;
    else if(cs==SEEK||cs==MATCH)
        st_cnt_match<=st_cnt_match+1;
    else    
        st_cnt_match<=0;
end

always @(posedge clk or posedge reset) begin
    if(reset)
        valid<=0;
    else if(cs==GOOD||cs==FAIL)
        valid<=1;
    else
        valid<=0;
end

always @(posedge clk or posedge reset) begin
    if(reset)
        match<=0;
    else if(cs==GOOD)
        match<=1;
    else
        match<=0;
end

always @(posedge clk or posedge reset) begin
    if(reset)
        match_index<=0;
    else if(cs==GOOD)
        match_index<=match_index_reg;
    else   
        match_index<=0;
end

always @(posedge clk or posedge reset) begin
    if(reset)
        match_index_reg<=0;
    else if(cs==SEEK&&ns==MATCH&&pa_reg[pa_cnt_match]== 8'h5E)
        match_index_reg<=st_cnt_match+1;
    else if(cs==SEEK&&ns==MATCH)
        match_index_reg<=st_cnt_match;
    else
        match_index_reg<=match_index_reg;    
end

//debug
wire[7:0]now_pa;
wire[7:0]now_st;
wire[7:0]now_pa_3;
wire[7:0]now_st_3;
assign now_pa=pa_reg[pa_cnt_match]; 
assign now_st=st_reg[st_cnt_match];
assign now_pa_3=pa_reg[pa_cnt_match+3];
assign now_st_3=st_reg[st_cnt_match+3];
endmodule
