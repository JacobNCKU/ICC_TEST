module SET (
    input clk, rst,
    input en,
    input [23:0] central,
    input [11:0] radius,
    input [1:0] mode,
    output busy,
    output valid,
    output [7:0] candidate
);

reg valid;
reg [7:0] candidate;
reg busy;

reg [3:0] x1, x2, x3;
reg [3:0] y1, y2, y3;
reg [3:0] r1, r2, r3;

wire [8:0] test1, test2, test3;
wire [6:0] r1_root, r2_root, r3_root;

reg [1:0] cs, ns;
reg [3:0] ctr_x, ctr_y;

parameter IDLE = 3'd0;
parameter GET = 3'd1;
parameter CAL = 3'd2;

// State machine
always @(posedge clk or posedge rst) begin
    if (rst)
        cs <= IDLE;
    else
        cs <= ns;
end

always @(*) begin
    case (cs)
        IDLE:
            if (en)
                ns = GET;
            else
                ns = IDLE;
        GET:
            if (~en)
                ns = CAL;
            else
                ns = GET;
        CAL:
            if (ctr_x == 8 && ctr_y == 8)
                ns = IDLE;
            else
                ns = CAL;
        default:
            ns = IDLE;
    endcase
end

// Output signals
always @(posedge clk or posedge rst) begin
    if (rst)
        busy <= 0;
    else if (~en && ctr_x == 8 && ctr_y == 8)
        busy <= 1;
    else
        busy <= 0;
end

always @(posedge clk or posedge rst) begin
    if (rst)
        valid <= 0;
    else if (cs == CAL && ctr_x == 8 && ctr_y == 8)
        valid <= 1;
    else
        valid <= 0;
end

// Counter logic
always @(posedge clk or posedge rst) begin
    if (rst) begin
        ctr_x <= 1;
        ctr_y <= 1;
    end else if (cs == CAL && (mode == 0 || mode == 1 || mode == 2 || mode == 3)) begin
        if (ctr_x != 8)
            ctr_x <= ctr_x + 1;
        else if (ctr_y != 8) begin
            ctr_x <= 1;
            ctr_y <= ctr_y + 1;
        end else if (ctr_y == 8) begin
            ctr_x <= 1;
            ctr_y <= 1;
        end
    end
end

// Distance calculations
assign test1 = (x1 - ctr_x) * (x1 - ctr_x) + (y1 - ctr_y) * (y1 - ctr_y);
assign r1_root = r1 * r1;

assign test2 = (x2 - ctr_x) * (x2 - ctr_x) + (y2 - ctr_y) * (y2 - ctr_y);
assign r2_root = r2 * r2;

assign test3 = (x3 - ctr_x) * (x3 - ctr_x) + (y3 - ctr_y) * (y3 - ctr_y);
assign r3_root = r3 * r3;

always @(posedge clk or posedge rst) begin
    if (rst) begin
       candidate <= 0; // Reset the 'candidate' variable to 0
    end
    else if (cs == GET) begin
       candidate <= 0; // Reset the 'candidate' variable to 0 when 'cs' is equal to 'GET'
    end
    else if (cs == CAL) begin   
        case (mode)
            0: // Mode 0
                if (test1 <= r1_root)
                    candidate <= candidate + 1; // Increment 'candidate' if 'test1' is less than or equal to 'r1_root'
                else
                    candidate <= candidate;

            1: // Mode 1
                if ((test1 <= r1_root) & (test2 <= r2_root))
                    candidate <= candidate + 1; // Increment 'candidate' if both 'test1' and 'test2' are less than or equal to their respective roots
                else
                    candidate <= candidate;

            2: // Mode 2
                if ((test1 <= r1_root) & (test2 > r2_root))
                    candidate <= candidate + 1; // Increment 'candidate' if 'test1' is less than or equal to 'r1_root' and 'test2' is greater than 'r2_root'
                else if ((test1 > r1_root) & (test2 <= r2_root))
                    candidate <= candidate + 1; // Increment 'candidate' if 'test1' is greater than 'r1_root' and 'test2' is less than or equal to 'r2_root'
                else
                    candidate <= candidate;

            3: // Mode 3
                if ((test1 <= r1_root) & (test2 <= r2_root) & (test3 > r3_root))
                    candidate <= candidate + 1; // Increment 'candidate' if 'test1' and 'test2' are less than or equal to their respective roots and 'test3' is greater than 'r3_root'
                else if ((test1 <= r1_root) & (test2 > r2_root) & (test3 <= r3_root))
                    candidate <= candidate + 1; // Increment 'candidate' if 'test1' is less than or equal to 'r1_root', 'test2' is greater than 'r2_root', and 'test3' is less than or equal to 'r3_root'
                else if ((test1 > r1_root) & (test2 <= r2_root) & (test3 <= r3_root))
                    candidate <= candidate + 1; // Increment 'candidate' if 'test1' is greater than 'r1_root', 'test2' is less than or equal to 'r2_root', and 'test3' is less than or equal to 'r3_root'
                else
                    candidate <= candidate; 
        endcase
    end
end

always @(posedge clk or posedge rst) begin
    if(rst)begin
        x1 <= 3'd0;
        y2 <= 3'd0;
        x2 <= 3'd0;
        y1 <= 3'd0;
        x2 <= 3'd0;
        y3 <= 3'd0;
    end
    else if(en) begin
        x1 <= central[23:20];
        y1 <= central[19:16];
        x2 <= central[15:12];
        y2 <= central[11:8];
        x3 <= central[7:4];
        y3 <= central[3:0];
    end
end

always @(posedge clk or posedge rst) begin
    if(rst)begin
        r1  <= 3'd0;
        r2  <= 3'd0;
        r3  <= 3'd0;
    end
    else if(en)begin
       r1   <= radius[11:8];
       r2   <= radius[7:4];
       r3   <= radius[3:0]; 
    end
end
endmodule

