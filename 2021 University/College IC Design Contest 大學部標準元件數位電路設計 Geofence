module geofence ( clk,reset,X,Y,valid,is_inside);
input clk;
input reset;
input [9:0] X;
input [9:0] Y;
output valid;
output is_inside;

reg valid;
reg is_inside;
reg valid_i;

reg [9:0] xi[6:0];
reg [9:0] yi[6:0];

reg signed[10:0] A;
reg signed[10:0] B;
wire signed[20:0] R;
reg signed [20:0] product;

parameter IDLE=0;
parameter GET=1;
parameter RE=2;
parameter CAL=3;
parameter FINSH=4;
reg [2:0]cs,ns;

reg [2:0] j;
reg [3:0] i;
reg [1:0] flag;

always @(posedge clk or posedge reset) begin
    if(reset)
        cs<=GET;
    else 
        cs<=ns;
end 

always@(*) begin
   case(cs)
        IDLE: begin
            ns = (i != 6) ? GET : RE;
        end
        GET: begin
            ns = (i == 6) ? RE : GET;
         end
        RE: begin
            ns = (i == 1 && j == 3) ? CAL : RE;
        end
        CAL: begin
           ns = ((i == 6 && flag == 1) || ((product - R) > 0 && flag == 1)) ? FINSH : CAL;
        end
        FINSH: begin
            ns = IDLE;
        end
    endcase
end

always @(posedge clk) begin
    case(cs)
        1:
        begin    
            xi[i]<= X;
            yi[i]<= Y;   
        end 
        2:  
        begin//sorting
            if((product-R)>0&&flag==1)begin///Oriproduct[2],Oriproduct[3].....
                xi[j]<=xi[j+1];
                yi[j]<=yi[j+1];
                xi[j+1]<=xi[j];
                yi[j+1]<=yi[j];
            end
            else begin
                xi[j]<=xi[j];
                xi[j+1]<=xi[j+1];
                yi[j]<=yi[j];  
                yi[j+1]<=yi[j+1];
            end
   	    end
        endcase
    end

//A B
always@(*)begin
  if(cs == 2)
    A = (flag == 0) ? xi[j] - xi[1] : xi[j + 1] - xi[1];
  else if(cs == 3)
    A = (flag == 0) ? xi[i] - xi[0] : xi[(i == 6) ? 1 : (i + 1)] - xi[0];
    B = (cs == 2) ? ((flag == 0) ? yi[j + 1] - yi[1] : yi[j] - yi[1]) :
      ((cs == 3) ? ((flag == 0) ? yi[(i == 6) ? 1 : (i + 1)] - yi[0] : yi[i] - yi[0]) : B);
end

assign R = (cs==2||cs==3) ? A*B : R;

//product
always @(posedge clk ) begin
  if(cs == 2 || cs == 3) 
    case(flag)
        0:
           product<=R;
        1: 
            product<=product-R;
    endcase
  else
    product <= product;
end

//i,j
always @(posedge clk) begin
    case(cs)
    0:begin
        i<=0;
    end
    1:begin
    if(reset)
        i<=0;
    else if(i<6)
        i<=i+1;
    else
        i<=i;
    end
    2:begin//j==4,i==3,i+1==4
        if(flag==0&&j<=i)begin
            i<=i;
            j<=j;
        end
        else if(flag==2)begin
            i<=i;
            j<=j;
            valid_i<=valid_i;
        end
        else if(i>1&&valid_i==1)begin
            valid_i<=0;
            j<=2;
        end
        else if(j<i+1&&valid_i==0)
            j<=j+1;
        else if(j>=i+1&&valid_i==0)begin
            valid_i<=1;
            i<=i-1;
        end
        else
            valid_i<=valid_i;
    end
    3:begin
        if(flag==0)
            i<=i;
        else if(i<6 && (product-R)<0)
            i<=i+1;
        else
            i<=i;
    end
    default:begin
        i<=0;
        j<=2;
        valid_i<=1;
    end    
    endcase 
end    


always @(posedge clk) begin
    case(cs)
        1:begin
        if(i==6)
            flag<=0;
        else
            flag<=flag;
        end
        2:begin
            case(ns)
            2:begin
                case(flag)
                    0:begin
                        flag<=1;
                    end
                    1:begin
                        if(product-R>0)
                            flag<=2; 
                        else
                            flag<=0;
                    end
                    2:begin
                        flag<=0;
                    end
                    default:
                        flag<=flag;
                endcase
            end
            3:
                flag<=0;
            default:
                flag<=0;
            endcase
        end
        3:begin
            case(ns)
            3:begin
                if(flag==0)
                    flag<=1;
                else
                    flag<=0;
            end
            4:
                flag<=0;
            default:
                flag <= flag;
            endcase
        end
    endcase 
end


always @(posedge clk ) begin
    if(cs==FINSH)
		valid <=1;
	else
		valid <=0;
end

always @(posedge clk ) begin
    if(cs==FINSH&&(product<0))
        is_inside<=1;
    else
        is_inside<=0; 
end
endmodule
